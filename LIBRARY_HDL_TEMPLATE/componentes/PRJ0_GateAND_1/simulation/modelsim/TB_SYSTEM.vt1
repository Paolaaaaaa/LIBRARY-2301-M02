

`timescale 1 ns/ 1 ns
module TB_SYSTEM();
// constants                                           
// ============================================
// Parameter ( may differ for physical synthesis)
// ============================================
	// general purpose registers
	reg eachvec;

	// test vector input registers
// ============================================
// INTERNAL WIRE AND REG DECLARATIONS
// ============================================
	// wires (OUTPUTS)
	wire TB_SYSTEM_z_Out; 
	// reg (INPUTS)
	reg TB_SYSTEM_a_In;
	reg TB_SYSTEM_b_In;
	
	// assign statements (if any)                          
	BB_SYSTEM BB_SYSTEM_u0 (
	// port map - connection between master ports and signals/registers   
		.BB_SYSTEM_z_Out(TB_SYSTEM_z_Out),
		.BB_SYSTEM_a_In(TB_SYSTEM_a_In),
		.BB_SYSTEM_b_In(TB_SYSTEM_b_In)
	);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          

// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  

begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin     
	#0 		TB_SYSTEM_a_In <= 0; TB_SYSTEM_b_In <= 0;
	$display("Time: %2d TB_SYSTEM_a_In: %2d, TB_SYSTEM_b_In: %2d, TB_SYSTEM_z_Out: %2d", $time, TB_SYSTEM_a_In, TB_SYSTEM_b_In, TB_SYSTEM_z_Out);
	#100000 	TB_SYSTEM_a_In <= 0; TB_SYSTEM_b_In <= 1;
	$display("Time: %2d TB_SYSTEM_a_In: %2d, TB_SYSTEM_b_In: %2d, TB_SYSTEM_z_Out: %2d", $time, TB_SYSTEM_a_In, TB_SYSTEM_b_In, TB_SYSTEM_z_Out);
	#100000 	TB_SYSTEM_a_In <= 1; TB_SYSTEM_b_In <= 0;
	$display("Time: %2d TB_SYSTEM_a_In: %2d, TB_SYSTEM_b_In: %2d, TB_SYSTEM_z_Out: %2d", $time, TB_SYSTEM_a_In, TB_SYSTEM_b_In, TB_SYSTEM_z_Out);
	#100000 	TB_SYSTEM_a_In <= 1; TB_SYSTEM_b_In <= 1;
	$display("Time: %2d TB_SYSTEM_a_In: %2d, TB_SYSTEM_b_In: %2d, TB_SYSTEM_z_Out: %2d", $time, TB_SYSTEM_a_In, TB_SYSTEM_b_In, TB_SYSTEM_z_Out);
	#100000 	TB_SYSTEM_a_In <= 0; TB_SYSTEM_b_In <= 0;
	$display("Time: %2d TB_SYSTEM_a_In: %2d, TB_SYSTEM_b_In: %2d, TB_SYSTEM_z_Out: %2d", $time, TB_SYSTEM_a_In, TB_SYSTEM_b_In, TB_SYSTEM_z_Out);
	#100000 	TB_SYSTEM_a_In <= 0; TB_SYSTEM_b_In <= 1;
	$display("Time: %2d TB_SYSTEM_a_In: %2d, TB_SYSTEM_b_In: %2d, TB_SYSTEM_z_Out: %2d", $time, TB_SYSTEM_a_In, TB_SYSTEM_b_In, TB_SYSTEM_z_Out);
	#100000 	TB_SYSTEM_a_In <= 1; TB_SYSTEM_b_In <= 0;	
	$display("Time: %2d TB_SYSTEM_a_In: %2d, TB_SYSTEM_b_In: %2d, TB_SYSTEM_z_Out: %2d", $time, TB_SYSTEM_a_In, TB_SYSTEM_b_In, TB_SYSTEM_z_Out);
	#100000 	TB_SYSTEM_a_In <= 1; TB_SYSTEM_b_In <= 1;
	$display("Time: %2d TB_SYSTEM_a_In: %2d, TB_SYSTEM_b_In: %2d, TB_SYSTEM_z_Out: %2d", $time, TB_SYSTEM_a_In, TB_SYSTEM_b_In, TB_SYSTEM_z_Out);
	#100000 	TB_SYSTEM_a_In <= 0; TB_SYSTEM_b_In <= 0;
	$display("Time: %2d TB_SYSTEM_a_In: %2d, TB_SYSTEM_b_In: %2d, TB_SYSTEM_z_Out: %2d", $time, TB_SYSTEM_a_In, TB_SYSTEM_b_In, TB_SYSTEM_z_Out);
@eachvec;
$finish;                                              
// --> end                                             
end                                                    
endmodule

